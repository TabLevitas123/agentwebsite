import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { useForm } from '@/hooks/useForm';
import {
  TextField,
  NumberField,
  BaseFieldProps,
  FieldWrapper
} from './FormFieldBase';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { Switch } from '@/components/ui/switch';
import { Slider } from '@/components/ui/slider';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import {
  Tooltip,
  TooltipContent,
  TooltipTrigger,
} from '@/components/ui/tooltip';
import {
  Coins,
  Lock,
  Shield,
  Info,
  Settings,
  Users,
  Zap
} from 'lucide-react';

export const TokenNameField: React.FC<BaseFieldProps> = (props) => (
  <TextField
    {...props}
    placeholder="Enter token name"
    description="Choose a unique and memorable name for your token"
    customValidation={(value) => {
      if (value.length < 3) return 'Token name must be at least 3 characters';
      if (value.length > 50) return 'Token name must be less than 50 characters';
      if (!/^[a-zA-Z0-9\s]+$/.test(value)) return 'Only letters, numbers, and spaces allowed';
      return undefined;
    }}
  />
);

export const TokenSymbolField: React.FC<BaseFieldProps> = (props) => (
  <TextField
    {...props}
    placeholder="Enter token symbol"
    description="3-11 characters, uppercase letters only"
    customValidation={(value) => {
      if (value.length < 3) return 'Symbol must be at least 3 characters';
      if (value.length > 11) return 'Symbol must be less than 11 characters';
      if (!/^[A-Z]+$/.test(value)) return 'Only uppercase letters allowed';
      return undefined;
    }}
  />
);

export const InitialSupplyField: React.FC<BaseFieldProps> = (props) => (
  <NumberField
    {...props}
    min={1}
    placeholder="Enter initial supply"
    description="Total number of tokens to create initially"
    customValidation={(value) => {
      if (!value || value < 1) return 'Initial supply must be at least 1';
      if (value > 1000000000) return 'Initial supply cannot exceed 1 billion';
      return undefined;
    }}
  />
);

export const TokenTypeField: React.FC<BaseFieldProps> = ({
  name,
  label,
  description,
  required,
  disabled,
  className
}) => {
  const { state, setFieldValue, setFieldTouched } = useForm();
  const field = state.fields[name];

  const tokenTypes = [
    {
      value: 'standard',
      label: 'Standard',
      description: 'Basic ERC20 token with standard features',
      icon: <Coins className="w-4 h-4" />
    },
    {
      value: 'mintable',
      label: 'Mintable',
      description: 'Allows creating new tokens after deployment',
      icon: <Zap className="w-4 h-4" />
    },
    {
      value: 'burnable',
      label: 'Burnable',
      description: 'Allows token destruction',
      icon: <Lock className="w-4 h-4" />
    },
    {
      value: 'pausable',
      label: 'Pausable',
      description: 'Can pause token transfers',
      icon: <Shield className="w-4 h-4" />
    }
  ];

  return (
    <FieldWrapper
      label={label}
      description={description}
      required={required}
      error={field?.error}
      touched={field?.touched}
      isValid={field?.isValid}
      className={className}
    >
      <div className="space-y-4">
        <div className="flex items-center justify-between">
          <Button
            type="button"
            variant="ghost"
            size="sm"
            onClick={() => setShowAdvanced(!showAdvanced)}
          >
            {showAdvanced ? 'Hide' : 'Show'} Advanced Settings
          </Button>
        </div>

        <motion.div
          initial={false}
          animate={{ height: showAdvanced ? 'auto' : 0 }}
          className="overflow-hidden"
        >
          <div className="space-y-4 pt-4">
            {roles.map((role) => (
              <div
                key={role.name}
                className="flex items-center justify-between p-4 rounded-lg bg-secondary"
              >
                <div className="flex items-center gap-3">
                  {role.icon}
                  <div>
                    <div className="font-medium">{role.label}</div>
                    <div className="text-sm text-gray-500">
                      {role.description}
                    </div>
                  </div>
                </div>
                <Switch
                  checked={field?.value?.includes(role.name)}
                  onCheckedChange={(checked) => handleRoleChange(role.name, checked)}
                  disabled={disabled}
                />
              </div>
            ))}
          </div>
        </motion.div>
      </div>
    </FieldWrapper>
  );
};

export const MaxSupplyField: React.FC<BaseFieldProps> = (props) => (
  <NumberField
    {...props}
    min={0}
    placeholder="Enter maximum supply (0 for unlimited)"
    description="Maximum number of tokens that can ever exist"
    customValidation={(value) => {
      if (value < 0) return 'Maximum supply cannot be negative';
      if (value > 1000000000000) return 'Maximum supply cannot exceed 1 trillion';
      return undefined;
    }}
  />
);

export const TokenDecimalsField: React.FC<BaseFieldProps> = (props) => {
  const { state } = useForm();
  const defaultDecimals = 18;

  return (
    <div className="space-y-4">
      <NumberField
        {...props}
        min={0}
        max={18}
        placeholder="Enter token decimals"
        description={`Number of decimal places (default: ${defaultDecimals})`}
        customValidation={(value) => {
          if (value < 0) return 'Decimals cannot be negative';
          if (value > 18) return 'Decimals cannot exceed 18';
          return undefined;
        }}
      />
      <div className="text-sm text-gray-500">
        <Tooltip>
          <TooltipTrigger>
            <Info className="w-4 h-4 inline-block mr-1" />
            Example values with {state.fields[props.name]?.value || defaultDecimals} decimals
          </TooltipTrigger>
          <TooltipContent>
            <div className="space-y-2">
              <div>1 token = 1.{'0'.repeat(Number(state.fields[props.name]?.value || defaultDecimals))}</div>
              <div>0.{'0'.repeat(Number(state.fields[props.name]?.value || defaultDecimals) - 1)}1 = smallest unit</div>
            </div>
          </TooltipContent>
        </Tooltip>
      </div>
    </div>
  );
};

export const TransferDelayField: React.FC<BaseFieldProps> = ({
  name,
  label,
  description,
  required,
  disabled,
  className
}) => {
  const { state, setFieldValue, setFieldTouched } = useForm();
  const field = state.fields[name];

  return (
    <FieldWrapper
      label={label}
      description={description}
      required={required}
      error={field?.error}
      touched={field?.touched}
      isValid={field?.isValid}
      className={className}
    >
      <div className="space-y-4">
        <Switch
          checked={field?.value?.enabled ?? false}
          onCheckedChange={(checked) => {
            setFieldValue(name, {
              ...field?.value,
              enabled: checked,
              delay: field?.value?.delay ?? 0
            });
            setFieldTouched(name);
          }}
          disabled={disabled}
        />
        
        {field?.value?.enabled && (
          <motion.div
            initial={{ opacity: 0, height: 0 }}
            animate={{ opacity: 1, height: 'auto' }}
            exit={{ opacity: 0, height: 0 }}
            className="pt-4"
          >
            <Slider
              value={[field?.value?.delay ?? 0]}
              onValueChange={([value]) => {
                setFieldValue(name, {
                  ...field?.value,
                  delay: value
                });
              }}
              onValueCommit={() => setFieldTouched(name)}
              disabled={disabled}
              min={0}
              max={72}
              step={1}
            />
            <div className="flex justify-between text-sm text-gray-500 mt-2">
              <span>No delay</span>
              <span>{field?.value?.delay ?? 0} hours</span>
              <span>72 hours</span>
            </div>
          </motion.div>
        )}
      </div>
    </FieldWrapper>
  );
};
      required={required}
      error={field?.error}
      touched={field?.touched}
      isValid={field?.isValid}
      className={className}
    >
      <Select
        value={field?.value}
        onValueChange={(value) => {
          setFieldValue(name, value);
          setFieldTouched(name);
        }}
        disabled={disabled}
      >
        <SelectTrigger>
          <SelectValue placeholder="Select token type" />
        </SelectTrigger>
        <SelectContent>
          {tokenTypes.map((type) => (
            <SelectItem
              key={type.value}
              value={type.value}
              className="flex items-center gap-2"
            >
              <div className="flex items-center gap-2">
                {type.icon}
                <div>
                  <div className="font-medium">{type.label}</div>
                  <div className="text-xs text-gray-500">{type.description}</div>
                </div>
              </div>
            </SelectItem>
          ))}
        </SelectContent>
      </Select>
    </FieldWrapper>
  );
};

export const AccessControlField: React.FC<BaseFieldProps> = ({
  name,
  label,
  description,
  required,
  disabled,
  className
}) => {
  const { state, setFieldValue, setFieldTouched } = useForm();
  const field = state.fields[name];
  const [showAdvanced, setShowAdvanced] = useState(false);

  const handleRoleChange = (role: string, enabled: boolean) => {
    const currentRoles = field?.value || [];
    const newRoles = enabled
      ? [...currentRoles, role]
      : currentRoles.filter((r: string) => r !== role);
    setFieldValue(name, newRoles);
    setFieldTouched(name);
  };

  const roles = [
    {
      name: 'MINTER_ROLE',
      label: 'Minter',
      description: 'Can create new tokens',
      icon: <Zap className="w-4 h-4" />
    },
    {
      name: 'PAUSER_ROLE',
      label: 'Pauser',
      description: 'Can pause token transfers',
      icon: <Shield className="w-4 h-4" />
    },
    {
      name: 'ADMIN_ROLE',
      label: 'Admin',
      description: 'Full administrative control',
      icon: <Settings className="w-4 h-4" />
    },
    {
      name: 'OPERATOR_ROLE',
      label: 'Operator',
      description: 'Can manage token operations',
      icon: <Users className="w-4 h-4" />
    }
  ];

  return (
    <FieldWrapper
      label={label}
      description={description}
      